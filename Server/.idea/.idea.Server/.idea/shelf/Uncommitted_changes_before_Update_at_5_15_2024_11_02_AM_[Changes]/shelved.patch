Index: Tests/IntegrationTests/UserControllerTests.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System.Net;\r\nusing System.Text;\r\nusing Microsoft.AspNetCore.Hosting;\r\nusing Microsoft.AspNetCore.Mvc.Testing;\r\nusing Microsoft.AspNetCore.TestHost;\r\nusing Microsoft.Extensions.Configuration;\r\nusing Newtonsoft.Json;\r\nusing Server;\r\nusing Server.Model.Requests.Auth;\r\nusing Server.Model.Requests.User;\r\nusing Server.Model.Responses.User;\r\nusing Xunit;\r\nusing Xunit.Abstractions;\r\nusing Assert = Xunit.Assert;\r\n\r\nnamespace Tests.IntegrationTests;\r\n\r\n[Collection(\"Sequential\")]\r\npublic class UserControllerTests : IClassFixture<WebApplicationFactory<Startup>>\r\n{\r\n    private readonly AuthRequest _testUser1 = new (\"TestUsername1\", \"testUserPassword123###\");\r\n    private readonly HttpClient _client;\r\n    private readonly TestServer _testServer;\r\n\r\n    public UserControllerTests()\r\n    {\r\n        var builder = new WebHostBuilder()\r\n            .UseEnvironment(\"Test\")\r\n            .UseStartup<Startup>()\r\n            .ConfigureAppConfiguration(config =>\r\n            {\r\n                config.AddConfiguration(\r\n                    new ConfigurationBuilder()\r\n                        .SetBasePath(Directory.GetCurrentDirectory())\r\n                        .AddJsonFile(\"testConfiguration.json\")\r\n                        .Build()\r\n                    );\r\n            });\r\n\r\n        _testServer = new TestServer(builder);\r\n        _client = _testServer.CreateClient();\r\n        var cookies = TestLogin.Login_With_Test_User(_testUser1, _client, \"test1@hotmail.com\").Result;\r\n        _client.DefaultRequestHeaders.Add(\"Cookie\", cookies);\r\n    }\r\n    \r\n    [Fact]\r\n    public async Task GetUserCredentials_ReturnSuccessStatusCode()\r\n    {\r\n        var getUserResponse = await _client.GetAsync($\"api/v1/User/getUserCredentials?userId=38db530c-b6bb-4e8a-9c19-a5cd4d0fa916\");\r\n        getUserResponse.EnsureSuccessStatusCode();\r\n    }\r\n    \r\n    [Fact]\r\n    public async Task GetUser_Credentials_ReturnNotFound()\r\n    {\r\n        var getUserResponse = await _client.GetAsync($\"api/v1/User/getUserCredentials?username=NotFoundUserName\");\r\n        Assert.Equal(HttpStatusCode.NotFound, getUserResponse.StatusCode);\r\n    }\r\n    \r\n    [Fact]\r\n    public async Task ChangeEmail_WithValidModelState_ReturnSuccessStatusCode()\r\n    {\r\n        var emailRequest = new ChangeEmailRequest(\"test1@hotmail.com\", \"test1@hotmail123.com\");\r\n        var jsonRequestRegister = JsonConvert.SerializeObject(emailRequest);\r\n        var userChangeEmail = new StringContent(jsonRequestRegister, Encoding.UTF8, \"application/json\");\r\n\r\n        var getUserResponse = await _client.PatchAsync(\"api/v1/User/ChangeEmail\", userChangeEmail);\r\n        getUserResponse.EnsureSuccessStatusCode();\r\n        \r\n        var emailRequest2 = new ChangeEmailRequest(\"test1@hotmail123.com\", \"test1@hotmail.com\");\r\n        var jsonRequestRegister2 = JsonConvert.SerializeObject(emailRequest2);\r\n        var userChangeEmail2 = new StringContent(jsonRequestRegister2, Encoding.UTF8, \"application/json\");\r\n\r\n        var getUserResponse2 = await _client.PatchAsync(\"api/v1/User/ChangeEmail\", userChangeEmail2);\r\n        getUserResponse2.EnsureSuccessStatusCode();\r\n        \r\n        var responseContent = await getUserResponse.Content.ReadAsStringAsync();\r\n    \r\n        var responseObject = JsonConvert.DeserializeObject<EmailUsernameResponse>(responseContent);\r\n\r\n        Assert.NotNull(responseObject);\r\n    }\r\n    \r\n    [Fact]\r\n    public async Task ChangeEmail_WithNotRegisteredUser_ReturnNotFound()\r\n    {\r\n        var emailRequest = new ChangeEmailRequest(\"notFound@gmail.com\", \"notFound@gmail.com\");\r\n        var jsonRequestRegister = JsonConvert.SerializeObject(emailRequest);\r\n        var userChangeEmail = new StringContent(jsonRequestRegister, Encoding.UTF8, \"application/json\");\r\n\r\n        var getUserResponse = await _client.PatchAsync(\"api/v1/User/ChangeEmail\", userChangeEmail);\r\n        Assert.Equal(HttpStatusCode.NotFound, getUserResponse.StatusCode);\r\n    }\r\n    \r\n    [Fact]\r\n    public async Task ChangeEmail_ForNotActivated2FAUser_ReturnNotFound()\r\n    {\r\n        var emailRequest = new ChangeEmailRequest(\"test3@hotmail.com\", \"ntest3@hotmail.com\");\r\n        var jsonRequestRegister = JsonConvert.SerializeObject(emailRequest);\r\n        var userChangeEmail = new StringContent(jsonRequestRegister, Encoding.UTF8, \"application/json\");\r\n\r\n        var getUserResponse = await _client.PatchAsync(\"api/v1/User/ChangeEmail\", userChangeEmail);\r\n        Assert.Equal(HttpStatusCode.NotFound, getUserResponse.StatusCode);\r\n    }\r\n    \r\n    [Fact]\r\n    public async Task ChangeEmail_WithInUseUserEmail_ReturnNotNotFound()\r\n    {\r\n        var emailRequest = new ChangeEmailRequest(\"test1@hotmail.com\", \"test3@hotmail.com\");\r\n        var jsonRequestRegister = JsonConvert.SerializeObject(emailRequest);\r\n        var userChangeEmail = new StringContent(jsonRequestRegister, Encoding.UTF8, \"application/json\");\r\n\r\n        var getUserResponse = await _client.PatchAsync(\"api/v1/User/ChangeEmail\", userChangeEmail);\r\n        Assert.Equal(HttpStatusCode.BadRequest, getUserResponse.StatusCode);\r\n    }\r\n    \r\n    [Fact]\r\n    public async Task ChangeEmail_WithNotValidEmail_ReturnBadRequest()\r\n    {\r\n        var emailRequest = \"\";\r\n        var jsonRequestRegister = JsonConvert.SerializeObject(emailRequest);\r\n        var userChangeEmail = new StringContent(jsonRequestRegister, Encoding.UTF8, \"application/json\");\r\n\r\n        var getUserResponse = await _client.PatchAsync(\"api/v1/User/ChangeEmail\", userChangeEmail);\r\n        \r\n        Assert.Equal(HttpStatusCode.BadRequest, getUserResponse.StatusCode);\r\n    }\r\n    \r\n    [Fact]\r\n    public async Task ChangePassword_ForValidUser_ReturnSuccessStatusCode()\r\n    {\r\n        var passwordRequest = new ChangeUserPasswordRequest(\"38db530c-b6bb-4e8a-9c19-a5cd4d0fa916\", \"testUserPassword123###\", \"testUserPassword123###!@#\", \"testUserPassword123###!@#\");\r\n        var jsonRequestRegister = JsonConvert.SerializeObject(passwordRequest);\r\n        var userChangeEmail = new StringContent(jsonRequestRegister, Encoding.UTF8, \"application/json\");\r\n\r\n        var getUserResponse = await _client.PatchAsync(\"api/v1/User/ChangePassword\", userChangeEmail);\r\n        getUserResponse.EnsureSuccessStatusCode();\r\n        \r\n        var passwordRequest1 = new ChangeUserPasswordRequest(\"38db530c-b6bb-4e8a-9c19-a5cd4d0fa916\", \"testUserPassword123###!@#\", \"testUserPassword123###\", \"testUserPassword123###\");\r\n        var jsonRequestRegister1 = JsonConvert.SerializeObject(passwordRequest1);\r\n        var userChangeEmail1 = new StringContent(jsonRequestRegister1, Encoding.UTF8, \"application/json\");\r\n        \r\n        var getUserResponse1 = await _client.PatchAsync(\"api/v1/User/ChangePassword\", userChangeEmail1);\r\n        getUserResponse1.EnsureSuccessStatusCode();\r\n    }\r\n    \r\n    [Fact]\r\n    public async Task ChangePassword_ForInvalidUser_ReturnBadRequest()\r\n    {\r\n        var passwordRequest = new ChangeUserPasswordRequest(\"123\", \"testUserPassword123###\", \"testUserPassword123###!@#\", \"otherTestUserPassword123###!@#\");\r\n        var jsonRequestRegister = JsonConvert.SerializeObject(passwordRequest);\r\n        var userChangeEmail = new StringContent(jsonRequestRegister, Encoding.UTF8, \"application/json\");\r\n\r\n        var getUserResponse = await _client.PatchAsync(\"api/v1/User/ChangePassword\", userChangeEmail);\r\n        Assert.Equal(HttpStatusCode.InternalServerError, getUserResponse.StatusCode);\r\n    }\r\n    \r\n    [Fact]\r\n    public async Task ChangePassword_WithNotMatchingPasswords_ReturnBadRequest()\r\n    {\r\n        var passwordRequest = new ChangeUserPasswordRequest(\"38db530c-b6bb-4e8a-9c19-a5cd4d0fa916\", \"testUserPassword123###\", \"testUserPassword123###!@#\", \"testUserPassword123###!@#123\");\r\n        var jsonRequestRegister = JsonConvert.SerializeObject(passwordRequest);\r\n        var userChangeEmail = new StringContent(jsonRequestRegister, Encoding.UTF8, \"application/json\");\r\n\r\n        var getUserResponse = await _client.PatchAsync(\"api/v1/User/ChangePassword\", userChangeEmail);\r\n        Assert.Equal(HttpStatusCode.BadRequest, getUserResponse.StatusCode);\r\n    }\r\n    \r\n    /*[Fact]\r\n    public async Task GetImage_WithValidId_ReturnSuccessStatusCode()\r\n    {\r\n        const string userId = \"38db530c-b6bb-4e8a-9c19-a5cd4d0fa916\";\r\n        Directory.SetCurrentDirectory(\"D:/after codecool/texting-application/Server/MessageAppServer\");\r\n        \r\n        var getImageResponse = await _client.GetAsync($\"api/v1/User/GetImage?userId={userId}\");\r\n        getImageResponse.EnsureSuccessStatusCode();\r\n    }\r\n    \r\n    [Fact]\r\n    public async Task GetImage_WithInvalidId_ReturnNotFound()\r\n    {\r\n        const string userId = \"123\";\r\n        Directory.SetCurrentDirectory(\"D:/after codecool/texting-application/Server/MessageAppServer\");\r\n        \r\n        var getImageResponse = await _client.GetAsync($\"api/v1User/GetImage?userId={userId}\");\r\n\r\n        Assert.Equal(HttpStatusCode.NotFound, getImageResponse.StatusCode);\r\n    }*/\r\n    \r\n    [Fact]\r\n    public async Task DeleteUser_WithValidUser_ReturnSuccessStatusCode()\r\n    {\r\n        const string email = \"test2@hotmail.com\";\r\n        const string password = \"testUserPassword123###\";\r\n\r\n        var deleteUrl = $\"api/v1/User/DeleteUser?email={Uri.EscapeDataString(email)}&password={Uri.EscapeDataString(password)}\";\r\n\r\n        var getUserResponse = await _client.DeleteAsync(deleteUrl);\r\n        getUserResponse.EnsureSuccessStatusCode();\r\n    }\r\n    \r\n    [Fact]\r\n    public async Task Delete_WithInvalidUser_ReturnBadRequest()\r\n    {\r\n        const string email = \"123\";\r\n        const string password = \"123\";\r\n\r\n        var deleteUrl = $\"api/v1/User/DeleteUser?email={Uri.EscapeDataString(email)}&password={Uri.EscapeDataString(password)}\";\r\n\r\n        var getUserResponse = await _client.DeleteAsync(deleteUrl);\r\n        Assert.Equal(HttpStatusCode.NotFound, getUserResponse.StatusCode);\r\n    }\r\n    \r\n    [Fact]\r\n    public async Task DeleteUser_WithWrongPassword_ReturnBadRequest()\r\n    {\r\n        const string email = \"test1@hotmail.com\";\r\n        const string password = \"123\";\r\n\r\n        var deleteUrl = $\"api/v1/User/DeleteUser?email={Uri.EscapeDataString(email)}&password={Uri.EscapeDataString(password)}\";\r\n\r\n        var getUserResponse = await _client.DeleteAsync(deleteUrl);\r\n        Assert.Equal(HttpStatusCode.BadRequest, getUserResponse.StatusCode);\r\n    }\r\n    \r\n    [Fact]\r\n    public async Task GetUserName_WithValidId_ReturnSuccessStatusCode()\r\n    {\r\n        const string userId = \"38db530c-b6bb-4e8a-9c19-a5cd4d0fa916\";\r\n\r\n        var getUserResponse = await _client.GetAsync($\"api/v1/User/GetUsername?userId={userId}\");\r\n        getUserResponse.EnsureSuccessStatusCode();\r\n    }\r\n    \r\n    [Fact]\r\n    public async Task GetUserName_WithNotValidId_ReturnsNotFound()\r\n    {\r\n        const string userId = \"123\";\r\n\r\n        var getUserResponse = await _client.GetAsync($\"api/v1/User/GetUsername?userId={userId}\");\r\n        Assert.Equal(HttpStatusCode.InternalServerError, getUserResponse.StatusCode);\r\n    }\r\n    \r\n    [Fact]\r\n    public async Task ChangeAvatar_WithValidId_ReturnReturnSuccessStatusCode()\r\n    {\r\n        var request = new AvatarChange(\"38db530c-b6bb-4e8a-9c19-a5cd4d0fa916\", \"-\");\r\n        var jsonRequestRegister = JsonConvert.SerializeObject(request);\r\n        var userChangeEmail = new StringContent(jsonRequestRegister, Encoding.UTF8, \"application/json\");\r\n        \r\n        var getUserResponse = await _client.PatchAsync(\"api/v1/User/ChangeAvatar\", userChangeEmail);\r\n        getUserResponse.EnsureSuccessStatusCode();\r\n    }\r\n    \r\n    [Fact]\r\n    public async Task ChangeAvatar_WithInvalidUser_ReturnBadRequest()\r\n    {\r\n        var request = new AvatarChange(\"123\", \"image\");\r\n        var jsonRequestRegister = JsonConvert.SerializeObject(request);\r\n        var userChangeEmail = new StringContent(jsonRequestRegister, Encoding.UTF8, \"application/json\");\r\n        \r\n        var getUserResponse = await _client.PatchAsync(\"api/v1/User/ChangeAvatar\", userChangeEmail);\r\n        Assert.Equal(HttpStatusCode.InternalServerError, getUserResponse.StatusCode);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Tests/IntegrationTests/UserControllerTests.cs b/Tests/IntegrationTests/UserControllerTests.cs
--- a/Tests/IntegrationTests/UserControllerTests.cs	(revision 132fe949be9093ca83b26d33e370f5e37ee8126f)
+++ b/Tests/IntegrationTests/UserControllerTests.cs	(date 1715763731210)
@@ -166,7 +166,7 @@
         Assert.Equal(HttpStatusCode.BadRequest, getUserResponse.StatusCode);
     }
     
-    /*[Fact]
+    [Fact]
     public async Task GetImage_WithValidId_ReturnSuccessStatusCode()
     {
         const string userId = "38db530c-b6bb-4e8a-9c19-a5cd4d0fa916";
@@ -185,7 +185,7 @@
         var getImageResponse = await _client.GetAsync($"api/v1User/GetImage?userId={userId}");
 
         Assert.Equal(HttpStatusCode.NotFound, getImageResponse.StatusCode);
-    }*/
+    }
     
     [Fact]
     public async Task DeleteUser_WithValidUser_ReturnSuccessStatusCode()
