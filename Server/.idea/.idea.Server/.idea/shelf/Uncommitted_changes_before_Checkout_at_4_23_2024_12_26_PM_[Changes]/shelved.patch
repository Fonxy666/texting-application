Index: MessageAppServer/Controllers/CookieController.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using Microsoft.AspNetCore.Authorization;\r\nusing Microsoft.AspNetCore.Mvc;\r\nusing Server.Services.Cookie;\r\n\r\nnamespace Server.Controllers;\r\n\r\n[ApiController]\r\n[Route(\"[controller]\")]\r\npublic class CookieController(ICookieService cookieService, ILogger logger) : ControllerBase\r\n{\r\n    [HttpPost(\"ChangeCookies\"), Authorize(Roles = \"User, Admin\")]\r\n    public Task<ActionResult<bool>> ChangeAnimateOrAnonymousCookie([FromQuery]string request)\r\n    {\r\n        try\r\n        {\r\n            if (request is not (\"Animation\" or \"Anonymous\"))\r\n            {\r\n                return Task.FromResult<ActionResult<bool>>(BadRequest(false));\r\n            }\r\n            \r\n            switch (request)\r\n            {\r\n                case \"Animation\":\r\n                    cookieService.ChangeAnimation();\r\n                    break;\r\n                case \"Anonymous\":\r\n                    cookieService.ChangeUserAnonymous();\r\n                    break;\r\n            }\r\n\r\n            return Task.FromResult<ActionResult<bool>>(Ok(true));\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            logger.LogError(e, $\"Error changing {request} cookie.\");\r\n            return Task.FromResult<ActionResult<bool>>(BadRequest($\"Error changing {request} cookie.\"));\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/MessageAppServer/Controllers/CookieController.cs b/MessageAppServer/Controllers/CookieController.cs
--- a/MessageAppServer/Controllers/CookieController.cs	
+++ b/MessageAppServer/Controllers/CookieController.cs	
@@ -6,34 +6,26 @@
 
 [ApiController]
 [Route("[controller]")]
-public class CookieController(ICookieService cookieService, ILogger logger) : ControllerBase
+public class CookieController(ICookieService cookieService) : ControllerBase
 {
     [HttpPost("ChangeCookies"), Authorize(Roles = "User, Admin")]
     public Task<ActionResult<bool>> ChangeAnimateOrAnonymousCookie([FromQuery]string request)
     {
-        try
-        {
-            if (request is not ("Animation" or "Anonymous"))
-            {
-                return Task.FromResult<ActionResult<bool>>(BadRequest(false));
-            }
-            
-            switch (request)
-            {
-                case "Animation":
-                    cookieService.ChangeAnimation();
-                    break;
-                case "Anonymous":
-                    cookieService.ChangeUserAnonymous();
-                    break;
-            }
+        if (request is not ("Animation" or "Anonymous"))
+        {
+            return Task.FromResult<ActionResult<bool>>(BadRequest(false));
+        }
+        
+        switch (request)
+        {
+            case "Animation":
+                cookieService.ChangeAnimation();
+                break;
+            case "Anonymous":
+                cookieService.ChangeUserAnonymous();
+                break;
+        }
 
-            return Task.FromResult<ActionResult<bool>>(Ok(true));
-        }
-        catch (Exception e)
-        {
-            logger.LogError(e, $"Error changing {request} cookie.");
-            return Task.FromResult<ActionResult<bool>>(BadRequest($"Error changing {request} cookie."));
-        }
+        return Task.FromResult<ActionResult<bool>>(Ok(true));
     }
 }
\ No newline at end of file
Index: MessageAppServer/Services/User/UserServices.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using Microsoft.AspNetCore.Identity;\r\nusing Microsoft.AspNetCore.StaticFiles;\r\nusing Server.Model;\r\nusing Server.Model.Responses.User;\r\n\r\nnamespace Server.Services.User;\r\n\r\npublic class UserServices(UserManager<ApplicationUser> userManager) : IUserServices\r\n{\r\n    public string SaveImageLocally(string userNameFileName, string base64Image)\r\n    {\r\n        var folderPath = Path.Combine(Directory.GetCurrentDirectory(), \"Avatars\");\r\n        if (!Directory.Exists(folderPath))\r\n        {\r\n            Directory.CreateDirectory(folderPath);\r\n        }\r\n\r\n        var imageName = userNameFileName + \".png\";\r\n        var imagePath = Path.Combine(folderPath, imageName);\r\n\r\n        try\r\n        {\r\n            if (base64Image.Length <= 1)\r\n            {\r\n                return \"\";\r\n            }\r\n            \r\n            base64Image = base64Image.Replace(\"data:image/png;base64,\", \"\");\r\n            var imageBytes = Convert.FromBase64String(base64Image);\r\n\r\n            using (var fileStream = new FileStream(imagePath, FileMode.Create))\r\n            {\r\n                fileStream.Write(imageBytes, 0, imageBytes.Length);\r\n            }\r\n\r\n            return imagePath;\r\n        }\r\n        catch (FormatException ex)\r\n        {\r\n            Console.WriteLine($\"Error decoding base64 image: {ex.Message}\");\r\n            throw;\r\n        }\r\n    }\r\n\r\n    public string GetContentType(string filePath)\r\n    {\r\n        var provider = new FileExtensionContentTypeProvider();\r\n        if (!provider.TryGetContentType(filePath, out var contentType))\r\n        {\r\n            contentType = \"application/octet-stream\";\r\n        }\r\n        return contentType;\r\n    }\r\n\r\n    public async Task<DeleteUserResponse> DeleteAsync(ApplicationUser user)\r\n    {\r\n        await userManager.DeleteAsync(user);\r\n\r\n        return new DeleteUserResponse($\"{user.UserName}\", \"Delete successful.\", true);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/MessageAppServer/Services/User/UserServices.cs b/MessageAppServer/Services/User/UserServices.cs
--- a/MessageAppServer/Services/User/UserServices.cs	
+++ b/MessageAppServer/Services/User/UserServices.cs	
@@ -1,11 +1,8 @@
-using Microsoft.AspNetCore.Identity;
-using Microsoft.AspNetCore.StaticFiles;
-using Server.Model;
-using Server.Model.Responses.User;
+using Microsoft.AspNetCore.Http.HttpResults;
 
 namespace Server.Services.User;
 
-public class UserServices(UserManager<ApplicationUser> userManager) : IUserServices
+public class UserServices : IUserServices
 {
     public string SaveImageLocally(string userNameFileName, string base64Image)
     {
@@ -41,21 +38,4 @@
             throw;
         }
     }
-
-    public string GetContentType(string filePath)
-    {
-        var provider = new FileExtensionContentTypeProvider();
-        if (!provider.TryGetContentType(filePath, out var contentType))
-        {
-            contentType = "application/octet-stream";
-        }
-        return contentType;
-    }
-
-    public async Task<DeleteUserResponse> DeleteAsync(ApplicationUser user)
-    {
-        await userManager.DeleteAsync(user);
-
-        return new DeleteUserResponse($"{user.UserName}", "Delete successful.", true);
-    }
 }
\ No newline at end of file
Index: MessageAppServer/Controllers/ChatController.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using Microsoft.AspNetCore.Authorization;\r\nusing Microsoft.AspNetCore.Mvc;\r\nusing Server.Model.Requests.Chat;\r\nusing Server.Model.Responses.Chat;\r\nusing Server.Services.Chat.RoomService;\r\n\r\nnamespace Server.Controllers;\r\n\r\n[Route(\"[controller]\")]\r\npublic class ChatController(IRoomService roomService, ILogger logger) : ControllerBase\r\n{\r\n    [HttpPost(\"RegisterRoom\"), Authorize(Roles = \"User, Admin\")]\r\n    public async Task<ActionResult<RoomResponse>> RegisterRoom([FromBody]RoomRequest request)\r\n    {\r\n        try\r\n        {\r\n            if (!ModelState.IsValid)\r\n            {\r\n                return BadRequest(new { error = \"New room credentials not valid.\" });\r\n            }\r\n\r\n            if (roomService.RoomNameTaken(request.RoomName).Result.Result)\r\n            {\r\n                return BadRequest(new { error = \"This room's name already taken.\" });\r\n            }\r\n            \r\n            var result = await roomService.RegisterRoomAsync(request.RoomName, request.Password);\r\n\r\n            return Ok(result);\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            logger.LogError(e, \"Error registering the room\");\r\n            return BadRequest(\"Error registering the room\");\r\n        }\r\n    }\r\n\r\n    [HttpPost(\"JoinRoom\"), Authorize(Roles = \"User, Admin\")]\r\n    public async Task<ActionResult<RoomResponse>> LoginRoom([FromBody]RoomRequest request)\r\n    {\r\n        try\r\n        {\r\n            if (!ModelState.IsValid)\r\n            {\r\n                return BadRequest(new { error = \"Room credentials not valid.\" });\r\n            }\r\n\r\n            var existingRoom = await roomService.GetRoom(request.RoomName);\r\n\r\n            if (existingRoom == null)\r\n            {\r\n                return NotFound(new { error = \"There is no room with the given Room name.\" });\r\n            }\r\n\r\n            if (existingRoom.PasswordMatch(existingRoom.Password))\r\n            {\r\n                return NotFound(new { error = \"Invalid login credentials.\" });\r\n            }\r\n            \r\n            return Ok(new RoomResponse(true, existingRoom.RoomId, existingRoom.RoomName));\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            logger.LogError(e, $\"Error login into {request.RoomName} room.\");\r\n            return BadRequest($\"Error login into {request.RoomName} room.\");\r\n        }\r\n    }\r\n    \r\n    [HttpPost(\"DeleteRoom\"), Authorize(Roles = \"User, Admin\")]\r\n    public async Task<ActionResult<RoomResponse>> DeleteRoom([FromBody]RoomRequest request)\r\n    {\r\n        try\r\n        {\r\n            if (!ModelState.IsValid)\r\n            {\r\n                return BadRequest(ModelState);\r\n            }\r\n            \r\n            var existingRoom = roomService.GetRoom(request.RoomName).Result;\r\n\r\n            if (existingRoom == null)\r\n            {\r\n                return NotFound(new { error = \"There is no room with the given Room name.\" });\r\n            }\r\n            \r\n            if (existingRoom.PasswordMatch(existingRoom.Password))\r\n            {\r\n                return NotFound(new { error = \"Invalid room credentials.\" });\r\n            }\r\n            \r\n            await roomService.DeleteRoomAsync(existingRoom);\r\n\r\n            return Ok(new RoomResponse(true, existingRoom.RoomId, existingRoom.RoomName));\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            logger.LogError(e, $\"Error deleting room {request.RoomName}.\");\r\n            return BadRequest($\"Error deleting room {request.RoomName}.\");\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/MessageAppServer/Controllers/ChatController.cs b/MessageAppServer/Controllers/ChatController.cs
--- a/MessageAppServer/Controllers/ChatController.cs	
+++ b/MessageAppServer/Controllers/ChatController.cs	
@@ -7,7 +7,7 @@
 namespace Server.Controllers;
 
 [Route("[controller]")]
-public class ChatController(IRoomService roomService, ILogger logger) : ControllerBase
+public class ChatController(IRoomService roomService) : ControllerBase
 {
     [HttpPost("RegisterRoom"), Authorize(Roles = "User, Admin")]
     public async Task<ActionResult<RoomResponse>> RegisterRoom([FromBody]RoomRequest request)
@@ -30,8 +30,8 @@
         }
         catch (Exception e)
         {
-            logger.LogError(e, "Error registering the room");
-            return BadRequest("Error registering the room");
+            Console.WriteLine(e);
+            throw;
         }
     }
 
@@ -61,8 +61,8 @@
         }
         catch (Exception e)
         {
-            logger.LogError(e, $"Error login into {request.RoomName} room.");
-            return BadRequest($"Error login into {request.RoomName} room.");
+            Console.WriteLine(e);
+            throw;
         }
     }
     
@@ -94,8 +94,8 @@
         }
         catch (Exception e)
         {
-            logger.LogError(e, $"Error deleting room {request.RoomName}.");
-            return BadRequest($"Error deleting room {request.RoomName}.");
+            Console.WriteLine(e);
+            throw;
         }
     }
 }
\ No newline at end of file
Index: MessageAppServer/Controllers/MessageController.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using Microsoft.AspNetCore.Mvc;\r\nusing Server.Services.Chat.MessageService;\r\nusing Microsoft.AspNetCore.Authorization;\r\nusing Server.Database;\r\nusing Server.Model.Chat;\r\nusing Server.Model.Requests.Message;\r\nusing Server.Model.Responses.Message;\r\n\r\nnamespace Server.Controllers;\r\n\r\n[Route(\"[controller]\")]\r\npublic class MessageController(IMessageService messageService, RoomsContext roomsContext, ILogger logger) : ControllerBase\r\n{\r\n    [HttpGet(\"GetMessages/{roomId}\"), Authorize(Roles = \"User, Admin\")]\r\n    public async Task<ActionResult<IQueryable<Message>>> GetMessages(string roomId)\r\n    {\r\n        try\r\n        {\r\n            if (!roomsContext.Rooms.Any(room => room.RoomId == roomId))\r\n            {\r\n                return BadRequest($\"There is no room with this id: {roomId}\");\r\n            }\r\n\r\n            var result = await messageService.GetLast10Messages(roomId);\r\n\r\n            return Ok(result);\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            logger.LogError(e, $\"Error getting messages for room: {roomId}\");\r\n            return BadRequest($\"Error getting messages for room: {roomId}\");\r\n        }\r\n    }\r\n    \r\n    [HttpPost(\"SendMessage\"), Authorize(Roles = \"User, Admin\")]\r\n    public async Task<ActionResult<MessageResponse>> SendMessage([FromBody]MessageRequest request)\r\n    {\r\n        if (!ModelState.IsValid)\r\n        {\r\n            return BadRequest(ModelState);\r\n        }\r\n        \r\n        var result = await messageService.SendMessage(request);\r\n\r\n        if (!result.Success)\r\n        {\r\n            return BadRequest(result.errorMessage);\r\n        }\r\n        \r\n        return Ok(result);\r\n    }\r\n    \r\n    [HttpPatch(\"EditMessage\"), Authorize(Roles = \"User, Admin\")]\r\n    public async Task<ActionResult<MessageResponse>> ModifyMessage([FromBody]EditMessageRequest request)\r\n    {\r\n        if (!ModelState.IsValid)\r\n        {\r\n            return BadRequest(ModelState);\r\n        }\r\n\r\n        var result = await messageService.EditMessage(request);\r\n\r\n        if (!result.Success)\r\n        {\r\n            return new MessageResponse(false, null, null);\r\n        }\r\n\r\n        return Ok(result);\r\n    }\r\n    \r\n    [HttpPatch(\"EditMessageSeen\"), Authorize(Roles = \"User, Admin\")]\r\n    public async Task<ActionResult<MessageResponse>> ModifyMessageSeen([FromBody]EditMessageSeenRequest request)\r\n    {\r\n        if (!ModelState.IsValid)\r\n        {\r\n            return BadRequest(ModelState);\r\n        }\r\n\r\n        var result = await messageService.EditMessageSeen(request);\r\n\r\n        return Ok(result);\r\n    }\r\n    \r\n    [HttpDelete(\"DeleteMessage\"), Authorize(Roles = \"User, Admin\")]\r\n    public async Task<ActionResult<MessageResponse>> DeleteMessage([FromQuery]string id)\r\n    {\r\n        if (!ModelState.IsValid)\r\n        {\r\n            return BadRequest(ModelState);\r\n        }\r\n        \r\n        await messageService.DeleteMessage(id);\r\n\r\n        return Ok(new MessageResponse(true, \"\", null));\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/MessageAppServer/Controllers/MessageController.cs b/MessageAppServer/Controllers/MessageController.cs
--- a/MessageAppServer/Controllers/MessageController.cs	
+++ b/MessageAppServer/Controllers/MessageController.cs	
@@ -9,27 +9,19 @@
 namespace Server.Controllers;
 
 [Route("[controller]")]
-public class MessageController(IMessageService messageService, RoomsContext roomsContext, ILogger logger) : ControllerBase
+public class MessageController(IMessageService messageService, RoomsContext roomsContext) : ControllerBase
 {
     [HttpGet("GetMessages/{roomId}"), Authorize(Roles = "User, Admin")]
     public async Task<ActionResult<IQueryable<Message>>> GetMessages(string roomId)
     {
-        try
-        {
-            if (!roomsContext.Rooms.Any(room => room.RoomId == roomId))
-            {
-                return BadRequest($"There is no room with this id: {roomId}");
-            }
+        if (!roomsContext.Rooms.Any(room => room.RoomId == roomId))
+        {
+            return BadRequest($"There is no room with this id: {roomId}");
+        }
 
-            var result = await messageService.GetLast10Messages(roomId);
+        var result = await messageService.GetLast10Messages(roomId);
 
-            return Ok(result);
-        }
-        catch (Exception e)
-        {
-            logger.LogError(e, $"Error getting messages for room: {roomId}");
-            return BadRequest($"Error getting messages for room: {roomId}");
-        }
+        return Ok(result);
     }
     
     [HttpPost("SendMessage"), Authorize(Roles = "User, Admin")]
Index: MessageAppServer/Controllers/UserController.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using Microsoft.AspNetCore.Authorization;\r\nusing Microsoft.AspNetCore.Identity;\r\nusing Microsoft.AspNetCore.Mvc;\r\nusing Server.Database;\r\nusing Server.Model;\r\nusing Server.Model.Requests.User;\r\nusing Server.Model.Responses.Auth;\r\nusing Server.Model.Responses.User;\r\nusing Server.Services.User;\r\n\r\nnamespace Server.Controllers;\r\n\r\n[ApiController]\r\n[Route(\"[controller]\")]\r\npublic class UserController(\r\n    UserManager<ApplicationUser> userManager,\r\n    UsersContext repository,\r\n    IUserServices userServices,\r\n    ILogger logger) : ControllerBase \r\n{\r\n    [HttpGet(\"getUsername/{userId}\"), Authorize(Roles = \"User, Admin\")]\r\n    public async Task<ActionResult<UsernameResponse>> GetUsername(string userId)\r\n    {\r\n        try\r\n        {\r\n            var existingUser = await userManager.FindByIdAsync(userId);\r\n            if (existingUser == null)\r\n            {\r\n                return NotFound(\"User not found.\");\r\n            }\r\n\r\n            var response = new UsernameResponse(existingUser.UserName!);\r\n\r\n            return response;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            logger.LogError(e, $\"Error getting username for user {userId}\");\r\n            return BadRequest($\"Error getting username for user {userId}\");\r\n        }\r\n    }\r\n    \r\n    [HttpGet(\"getUserCredentials\"), Authorize(Roles = \"User, Admin\")]\r\n    public async Task<ActionResult<UserResponse>> GetUserEmail([FromQuery]string userId)\r\n    {\r\n        try\r\n        {\r\n            var existingUser = await userManager.FindByIdAsync(userId);\r\n            if (existingUser == null)\r\n            {\r\n                return NotFound(\"User not found.\");\r\n            }\r\n\r\n            var response = new UserResponse(existingUser.UserName, existingUser.Email, existingUser.TwoFactorEnabled);\r\n\r\n            return response;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            logger.LogError(e, $\"Error getting e-mail for user {userId}\");\r\n            return BadRequest($\"Error getting e-mail for user {userId}\");\r\n        }\r\n    }\r\n\r\n    [HttpGet(\"GetImage/{userId}\")]\r\n    public async Task<IActionResult> GetImageWithId(string userId)\r\n    {\r\n        try\r\n        {\r\n            var existingUser = await userManager.FindByIdAsync(userId);\r\n            if (existingUser == null)\r\n            {\r\n                return NotFound(\"User not found.\");\r\n            }\r\n            \r\n            var folderPath = Path.Combine(Directory.GetCurrentDirectory(), \"Avatars\");\r\n            var imagePath = Path.Combine(folderPath, $\"{existingUser!.UserName}.png\");\r\n            FileContentResult result = null;\r\n\r\n            if (System.IO.File.Exists(imagePath))\r\n            {\r\n                var imageBytes = await System.IO.File.ReadAllBytesAsync(imagePath);\r\n                var contentType = userServices.GetContentType(imagePath);\r\n                \r\n                Response.Headers.Add(\"Cache-Control\", \"max-age=3600, public\");\r\n\r\n                result = File(imageBytes, contentType);\r\n            }\r\n            \r\n            return result ?? (IActionResult)NotFound();\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            logger.LogError(e, $\"Error getting avatar image for user {userId}\");\r\n            return BadRequest($\"Error getting avatar image for user {userId}\");\r\n        }\r\n    }\r\n    \r\n    [HttpGet(\"GetImageWithUsername/{userName}\")]\r\n    public async Task<IActionResult> GetImageWithUsername(string userName)\r\n    {\r\n        try\r\n        {\r\n            var folderPath = Path.Combine(Directory.GetCurrentDirectory(), \"Avatars\");\r\n            var imagePath = Path.Combine(folderPath, $\"{userName}.png\");\r\n            FileContentResult result = null;\r\n\r\n            if (System.IO.File.Exists(imagePath))\r\n            {\r\n                var imageBytes = await System.IO.File.ReadAllBytesAsync(imagePath);\r\n                var contentType = userServices.GetContentType(imagePath);\r\n                \r\n                Response.Headers.Add(\"Cache-Control\", \"max-age=3600, public\");\r\n\r\n                result = File(imageBytes, contentType);\r\n            }\r\n            \r\n            return result ?? (IActionResult)NotFound();\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            logger.LogError(e, $\"Error getting avatar image for user {userName}\");\r\n            return BadRequest($\"Error getting avatar image for user {userName}\");\r\n        }\r\n    }\r\n    \r\n    [HttpPatch(\"ChangeEmail\"), Authorize(Roles = \"User, Admin\")]\r\n    public async Task<ActionResult<ChangeEmailRequest>> ChangeUserEmail([FromBody]ChangeEmailRequest request)\r\n    {\r\n        try\r\n        {\r\n            var existingUser = await userManager.FindByEmailAsync(request.OldEmail);\r\n            if (existingUser == null)\r\n            {\r\n                return NotFound(\"User not found.\");\r\n            }\r\n\r\n            if (!existingUser.TwoFactorEnabled)\r\n            {\r\n                return BadRequest($\"2FA not enabled for user: {existingUser.Id}\");\r\n            }\r\n                \r\n            var token = await userManager.GenerateChangeEmailTokenAsync(existingUser, request.NewEmail);\r\n            await userManager.ChangeEmailAsync(existingUser, request.NewEmail, token);\r\n                \r\n            existingUser.NormalizedEmail = request.NewEmail.ToUpper();\r\n            await repository.SaveChangesAsync();\r\n            var response = new EmailUsernameResponse(existingUser.Email!, existingUser.UserName!);\r\n            return Ok(response);\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            logger.LogError(e, $\"Error changing e-mail for user {request.OldEmail}\");\r\n            return BadRequest($\"Error changing password for user {request.OldEmail}\");\r\n        }\r\n    }\r\n    \r\n    [HttpPatch(\"ChangePassword\"), Authorize(Roles = \"User, Admin\")]\r\n    public async Task<ActionResult<EmailUsernameResponse>> ChangeUserPassword([FromBody]ChangeUserPasswordRequest request)\r\n    {\r\n        try\r\n        {\r\n            var existingUser = await userManager.FindByIdAsync(request.Id);\r\n            if (existingUser == null)\r\n            {\r\n                return NotFound(\"User not found.\");\r\n            }\r\n\r\n            await userManager.ChangePasswordAsync(existingUser, request.OldPassword, request.Password);\r\n\r\n            await repository.SaveChangesAsync();\r\n                \r\n            await repository.SaveChangesAsync();\r\n            var response = new EmailUsernameResponse(existingUser.Email!, existingUser.UserName!);\r\n            return Ok(response);\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            logger.LogError(e, $\"Error changing password for user {request.Id}\");\r\n            return BadRequest($\"Error changing password for user {request.Id}\");\r\n        }\r\n    }\r\n\r\n    [HttpPatch(\"ChangeAvatar\"), Authorize(Roles = \"User, Admin\")]\r\n    public async Task<ActionResult<AuthResponse>> ChangeAvatar([FromBody]AvatarChange request)\r\n    {\r\n        try\r\n        {\r\n            var existingUser = await userManager.FindByIdAsync(request.UserId);\r\n            if (existingUser == null)\r\n            {\r\n                return NotFound(\"User not found.\");\r\n            }\r\n\r\n            userServices.SaveImageLocally(existingUser.UserName!, request.Image);\r\n            return Ok(new { Status = \"Ok\" });\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            logger.LogError(e, $\"Error changing avatar for user {request.UserId}\");\r\n            return BadRequest($\"Error changing avatar for user {request.UserId}\");\r\n        }\r\n    } \r\n    \r\n    [HttpDelete(\"DeleteUser\"), Authorize(Roles = \"User, Admin\")]\r\n    public async Task<ActionResult<EmailUsernameResponse>> DeleteUser([FromQuery]string email, [FromQuery]string password)\r\n    {\r\n        try\r\n        {\r\n            var existingUser = await userManager.FindByEmailAsync(email);\r\n            if (existingUser == null)\r\n            {\r\n                return NotFound(\"User not found.\");\r\n            }\r\n\r\n            if (!userManager.CheckPasswordAsync(existingUser, password).Result)\r\n            {\r\n                return BadRequest(\"Invalid credentials.\");\r\n            }\r\n\r\n            await userServices.DeleteAsync(existingUser);\r\n            \r\n            await repository.SaveChangesAsync();\r\n            var response = new EmailUsernameResponse(existingUser.Email!, existingUser.UserName!);\r\n            return Ok(response);\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            logger.LogError(e, $\"Error changing e-mail for user {email}\");\r\n            return BadRequest($\"Error changing e-mail for user {email}\");\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/MessageAppServer/Controllers/UserController.cs b/MessageAppServer/Controllers/UserController.cs
--- a/MessageAppServer/Controllers/UserController.cs	
+++ b/MessageAppServer/Controllers/UserController.cs	
@@ -1,11 +1,13 @@
 using Microsoft.AspNetCore.Authorization;
 using Microsoft.AspNetCore.Identity;
 using Microsoft.AspNetCore.Mvc;
+using Microsoft.AspNetCore.StaticFiles;
 using Server.Database;
 using Server.Model;
 using Server.Model.Requests.User;
 using Server.Model.Responses.Auth;
 using Server.Model.Responses.User;
+using Server.Services.Authentication;
 using Server.Services.User;
 
 namespace Server.Controllers;
@@ -15,219 +17,155 @@
 public class UserController(
     UserManager<ApplicationUser> userManager,
     UsersContext repository,
-    IUserServices userServices,
-    ILogger logger) : ControllerBase 
+    IAuthService authenticationService,
+    IUserServices userServices) : ControllerBase 
 {
     [HttpGet("getUsername/{userId}"), Authorize(Roles = "User, Admin")]
     public async Task<ActionResult<UsernameResponse>> GetUsername(string userId)
     {
-        try
-        {
-            var existingUser = await userManager.FindByIdAsync(userId);
-            if (existingUser == null)
-            {
-                return NotFound("User not found.");
-            }
+        var existingUser = await userManager.FindByIdAsync(userId);
+        if (existingUser == null)
+        {
+            return NotFound("User not found.");
+        }
 
-            var response = new UsernameResponse(existingUser.UserName!);
+        var response = new UsernameResponse(existingUser.UserName!);
 
-            return response;
-        }
-        catch (Exception e)
-        {
-            logger.LogError(e, $"Error getting username for user {userId}");
-            return BadRequest($"Error getting username for user {userId}");
-        }
+        return response;
     }
     
     [HttpGet("getUserCredentials"), Authorize(Roles = "User, Admin")]
     public async Task<ActionResult<UserResponse>> GetUserEmail([FromQuery]string userId)
     {
-        try
-        {
-            var existingUser = await userManager.FindByIdAsync(userId);
-            if (existingUser == null)
-            {
-                return NotFound("User not found.");
-            }
+        var existingUser = await userManager.FindByIdAsync(userId);
+        if (existingUser == null)
+        {
+            return NotFound("User not found.");
+        }
 
-            var response = new UserResponse(existingUser.UserName, existingUser.Email, existingUser.TwoFactorEnabled);
+        var response = new UserResponse(existingUser.UserName, existingUser.Email, existingUser.TwoFactorEnabled);
 
-            return response;
-        }
-        catch (Exception e)
-        {
-            logger.LogError(e, $"Error getting e-mail for user {userId}");
-            return BadRequest($"Error getting e-mail for user {userId}");
-        }
+        return response;
     }
 
     [HttpGet("GetImage/{userId}")]
     public async Task<IActionResult> GetImageWithId(string userId)
     {
-        try
-        {
-            var existingUser = await userManager.FindByIdAsync(userId);
-            if (existingUser == null)
-            {
-                return NotFound("User not found.");
-            }
-            
-            var folderPath = Path.Combine(Directory.GetCurrentDirectory(), "Avatars");
-            var imagePath = Path.Combine(folderPath, $"{existingUser!.UserName}.png");
-            FileContentResult result = null;
+        var existingUser = await userManager.FindByIdAsync(userId);
+        var folderPath = Path.Combine(Directory.GetCurrentDirectory(), "Avatars");
+        var imagePath = Path.Combine(folderPath, $"{existingUser!.UserName}.png");
+        FileContentResult result = null;
 
-            if (System.IO.File.Exists(imagePath))
-            {
-                var imageBytes = await System.IO.File.ReadAllBytesAsync(imagePath);
-                var contentType = userServices.GetContentType(imagePath);
-                
-                Response.Headers.Add("Cache-Control", "max-age=3600, public");
+        if (System.IO.File.Exists(imagePath))
+        {
+            var imageBytes = System.IO.File.ReadAllBytes(imagePath);
+            var contentType = GetContentType(imagePath);
+            
+            Response.Headers.Add("Cache-Control", "max-age=3600, public");
 
-                result = File(imageBytes, contentType);
-            }
-            
-            return result ?? (IActionResult)NotFound();
-        }
-        catch (Exception e)
-        {
-            logger.LogError(e, $"Error getting avatar image for user {userId}");
-            return BadRequest($"Error getting avatar image for user {userId}");
-        }
+            result = File(imageBytes, contentType);
+        }
+        
+        return result ?? (IActionResult)NotFound();
     }
     
     [HttpGet("GetImageWithUsername/{userName}")]
     public async Task<IActionResult> GetImageWithUsername(string userName)
     {
-        try
-        {
-            var folderPath = Path.Combine(Directory.GetCurrentDirectory(), "Avatars");
-            var imagePath = Path.Combine(folderPath, $"{userName}.png");
-            FileContentResult result = null;
+        var folderPath = Path.Combine(Directory.GetCurrentDirectory(), "Avatars");
+        var imagePath = Path.Combine(folderPath, $"{userName}.png");
+        FileContentResult result = null;
 
-            if (System.IO.File.Exists(imagePath))
-            {
-                var imageBytes = await System.IO.File.ReadAllBytesAsync(imagePath);
-                var contentType = userServices.GetContentType(imagePath);
-                
-                Response.Headers.Add("Cache-Control", "max-age=3600, public");
+        if (System.IO.File.Exists(imagePath))
+        {
+            var imageBytes = System.IO.File.ReadAllBytes(imagePath);
+            var contentType = GetContentType(imagePath);
+            
+            Response.Headers.Add("Cache-Control", "max-age=3600, public");
 
-                result = File(imageBytes, contentType);
-            }
-            
-            return result ?? (IActionResult)NotFound();
-        }
-        catch (Exception e)
+            result = File(imageBytes, contentType);
+        }
+        
+        return result ?? (IActionResult)NotFound();
+    }
+
+    private string GetContentType(string filePath)
+    {
+        var provider = new FileExtensionContentTypeProvider();
+        if (!provider.TryGetContentType(filePath, out var contentType))
         {
-            logger.LogError(e, $"Error getting avatar image for user {userName}");
-            return BadRequest($"Error getting avatar image for user {userName}");
+            contentType = "application/octet-stream";
         }
+        return contentType;
     }
     
     [HttpPatch("ChangeEmail"), Authorize(Roles = "User, Admin")]
     public async Task<ActionResult<ChangeEmailRequest>> ChangeUserEmail([FromBody]ChangeEmailRequest request)
     {
-        try
-        {
-            var existingUser = await userManager.FindByEmailAsync(request.OldEmail);
-            if (existingUser == null)
-            {
-                return NotFound("User not found.");
-            }
+        var existingUser = await userManager.FindByEmailAsync(request.OldEmail);
+        if (existingUser == null)
+        {
+            return BadRequest(ModelState);
+        }
 
-            if (!existingUser.TwoFactorEnabled)
-            {
-                return BadRequest($"2FA not enabled for user: {existingUser.Id}");
-            }
-                
-            var token = await userManager.GenerateChangeEmailTokenAsync(existingUser, request.NewEmail);
-            await userManager.ChangeEmailAsync(existingUser, request.NewEmail, token);
-                
-            existingUser.NormalizedEmail = request.NewEmail.ToUpper();
-            await repository.SaveChangesAsync();
-            var response = new EmailUsernameResponse(existingUser.Email!, existingUser.UserName!);
-            return Ok(response);
-        }
-        catch (Exception e)
-        {
-            logger.LogError(e, $"Error changing e-mail for user {request.OldEmail}");
-            return BadRequest($"Error changing password for user {request.OldEmail}");
-        }
+        if (!existingUser.TwoFactorEnabled)
+        {
+            return BadRequest(ModelState);
+        }
+            
+        var token = await userManager.GenerateChangeEmailTokenAsync(existingUser, request.NewEmail);
+        await userManager.ChangeEmailAsync(existingUser, request.NewEmail, token);
+            
+        existingUser.NormalizedEmail = request.NewEmail.ToUpper();
+        await repository.SaveChangesAsync();
+        var response = new EmailUsernameResponse(existingUser.Email!, existingUser.UserName!);
+        return Ok(response);
     }
     
     [HttpPatch("ChangePassword"), Authorize(Roles = "User, Admin")]
     public async Task<ActionResult<EmailUsernameResponse>> ChangeUserPassword([FromBody]ChangeUserPasswordRequest request)
     {
-        try
-        {
-            var existingUser = await userManager.FindByIdAsync(request.Id);
-            if (existingUser == null)
-            {
-                return NotFound("User not found.");
-            }
+        var existingUser = await userManager.FindByIdAsync(request.Id);
+        if (existingUser == null)
+        {
+            return BadRequest(ModelState);
+        }
 
-            await userManager.ChangePasswordAsync(existingUser, request.OldPassword, request.Password);
+        await userManager.ChangePasswordAsync(existingUser, request.OldPassword, request.Password);
 
-            await repository.SaveChangesAsync();
-                
-            await repository.SaveChangesAsync();
-            var response = new EmailUsernameResponse(existingUser.Email!, existingUser.UserName!);
-            return Ok(response);
-        }
-        catch (Exception e)
-        {
-            logger.LogError(e, $"Error changing password for user {request.Id}");
-            return BadRequest($"Error changing password for user {request.Id}");
-        }
+        await repository.SaveChangesAsync();
+            
+        await repository.SaveChangesAsync();
+        var response = new EmailUsernameResponse(existingUser.Email!, existingUser.UserName!);
+        return Ok(response);
     }
 
     [HttpPatch("ChangeAvatar"), Authorize(Roles = "User, Admin")]
     public async Task<ActionResult<AuthResponse>> ChangeAvatar([FromBody]AvatarChange request)
     {
-        try
-        {
-            var existingUser = await userManager.FindByIdAsync(request.UserId);
-            if (existingUser == null)
-            {
-                return NotFound("User not found.");
-            }
+        var existingUser = await userManager.FindByIdAsync(request.UserId);
+        if (existingUser == null)
+        {
+            return BadRequest(ModelState);
+        }
 
-            userServices.SaveImageLocally(existingUser.UserName!, request.Image);
-            return Ok(new { Status = "Ok" });
-        }
-        catch (Exception e)
-        {
-            logger.LogError(e, $"Error changing avatar for user {request.UserId}");
-            return BadRequest($"Error changing avatar for user {request.UserId}");
-        }
+        userServices.SaveImageLocally(existingUser.UserName!, request.Image);
+        return Ok(new { Status = "Ok" });
     } 
     
     [HttpDelete("DeleteUser"), Authorize(Roles = "User, Admin")]
-    public async Task<ActionResult<EmailUsernameResponse>> DeleteUser([FromQuery]string email, [FromQuery]string password)
+    public async Task<ActionResult<EmailUsernameResponse>> DeleteUser([FromQuery]string email, [FromQuery]string username, [FromQuery]string password)
     {
-        try
-        {
-            var existingUser = await userManager.FindByEmailAsync(email);
-            if (existingUser == null)
-            {
-                return NotFound("User not found.");
-            }
-
-            if (!userManager.CheckPasswordAsync(existingUser, password).Result)
-            {
-                return BadRequest("Invalid credentials.");
-            }
+        var existingUser = await userManager.FindByEmailAsync(email);
+        if (existingUser == null)
+        {
+            return BadRequest(ModelState);
+        }
 
-            await userServices.DeleteAsync(existingUser);
-            
-            await repository.SaveChangesAsync();
-            var response = new EmailUsernameResponse(existingUser.Email!, existingUser.UserName!);
-            return Ok(response);
-        }
-        catch (Exception e)
-        {
-            logger.LogError(e, $"Error changing e-mail for user {email}");
-            return BadRequest($"Error changing e-mail for user {email}");
-        }
+        await authenticationService.DeleteAsync(username, password);
+        
+        await repository.SaveChangesAsync();
+        var response = new EmailUsernameResponse(existingUser.Email!, existingUser.UserName!);
+        return Ok(response);
     }
 }
\ No newline at end of file
