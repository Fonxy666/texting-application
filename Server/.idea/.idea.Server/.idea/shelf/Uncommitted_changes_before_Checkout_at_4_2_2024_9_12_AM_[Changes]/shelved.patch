Index: MessageAppServer/Startup.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System.Text;\r\nusing Microsoft.AspNetCore.Authentication.JwtBearer;\r\nusing Microsoft.AspNetCore.Identity;\r\nusing Microsoft.EntityFrameworkCore;\r\nusing Microsoft.IdentityModel.Tokens;\r\nusing Microsoft.OpenApi.Models;\r\nusing Server.Database;\r\nusing Server.Hub;\r\nusing Server.Middlewares;\r\nusing Server.Model;\r\nusing Server.Services.Authentication;\r\nusing Server.Services.Chat.MessageService;\r\nusing Server.Services.Chat.RoomService;\r\nusing Server.Services.Cookie;\r\nusing Server.Services.EmailSender;\r\nusing Server.Services.User;\r\n\r\nnamespace Server\r\n{\r\n    public class Startup(IConfiguration configuration)\r\n    {\r\n        public void ConfigureServices(IServiceCollection services)\r\n        {\r\n            var connection = configuration[\"ConnectionString\"];\r\n            var issueSign = configuration[\"IssueSign\"];\r\n            var issueAudience = configuration[\"IssueAudience\"];\r\n\r\n            services.AddHttpContextAccessor();\r\n            services.AddControllers(options =>\r\n                options.SuppressImplicitRequiredAttributeForNonNullableReferenceTypes = true);\r\n\r\n            services.AddEndpointsApiExplorer();\r\n            services.AddSwaggerGen(options =>\r\n            {\r\n                options.SwaggerDoc(\"v1\", new OpenApiInfo { Title = \"Demo API\", Version = \"v1\" });\r\n                options.AddSecurityDefinition(\"Bearer\", new OpenApiSecurityScheme\r\n                {\r\n                    In = ParameterLocation.Header,\r\n                    Description = \"Please enter a valid token\",\r\n                    Name = \"Authorization\",\r\n                    Type = SecuritySchemeType.Http,\r\n                    BearerFormat = \"JWT\",\r\n                    Scheme = \"Bearer\"\r\n                });\r\n\r\n                options.AddSecurityRequirement(new OpenApiSecurityRequirement\r\n                {\r\n                    {\r\n                        new OpenApiSecurityScheme\r\n                        {\r\n                            Reference = new OpenApiReference\r\n                            {\r\n                                Type = ReferenceType.SecurityScheme,\r\n                                Id = \"Bearer\"\r\n                            }\r\n                        },\r\n                        Array.Empty<string>()\r\n                    }\r\n                });\r\n            });\r\n\r\n            services.AddSignalR();\r\n\r\n            services.AddScoped<ITokenService, TokenService>();\r\n            services.AddScoped<IAuthService, AuthService>();\r\n            services.AddScoped<IRoomService, RoomService>();\r\n            services.AddScoped<IMessageService, MessageService>();\r\n            services.AddScoped<IUserServices, UserServices>();\r\n            services.AddScoped<ICookieService, CookieService>();\r\n            services.AddSingleton<IDictionary<string, UserRoomConnection>>(opt =>\r\n                new Dictionary<string, UserRoomConnection>());\r\n            services.AddTransient<IEmailSender, EmailSender>();\r\n\r\n            services.AddDbContext<UsersContext>(options => options.UseSqlServer(connection));\r\n            services.AddDbContext<MessagesContext>(options => options.UseSqlServer(connection));\r\n            services.AddDbContext<RoomsContext>(options => options.UseSqlServer(connection));\r\n            \r\n            services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)\r\n                .AddCookie(\"Authorization\", options =>\r\n                {\r\n                    options.Cookie.HttpOnly = true;\r\n                })\r\n                .AddJwtBearer(options =>\r\n                {\r\n                    options.TokenValidationParameters = new TokenValidationParameters\r\n                    {\r\n                        ClockSkew = TimeSpan.Zero,\r\n                        ValidateIssuer = true,\r\n                        ValidateAudience = true,\r\n                        ValidateLifetime = true,\r\n                        ValidateIssuerSigningKey = true,\r\n                        ValidIssuer = issueAudience,\r\n                        ValidAudience = issueAudience,\r\n                        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(issueSign)),\r\n                        RequireExpirationTime = false\r\n                    };\r\n\r\n                    options.Events = new JwtBearerEvents\r\n                    {\r\n                        OnMessageReceived = context =>\r\n                        {\r\n                            context.Token = context.Request.Cookies[\"Authorization\"];\r\n                            return Task.CompletedTask;\r\n                        },\r\n                        OnTokenValidated = context =>\r\n                        {\r\n                            var logger = context.HttpContext.RequestServices.GetRequiredService<ILogger<Startup>>();\r\n                            logger.LogInformation(\"Token validation successful for user: {username}\", context.Principal.Identity?.Name);\r\n                            return Task.CompletedTask;\r\n                        },\r\n                        OnAuthenticationFailed = context =>\r\n                        {\r\n                            var logger = context.HttpContext.RequestServices.GetRequiredService<ILogger<Startup>>();\r\n                            logger.LogError(\"Authentication failed: {exception}\", context.Exception.Message);\r\n                            return Task.CompletedTask;\r\n                        }\r\n                    };\r\n                });\r\n\r\n            services.AddIdentityCore<ApplicationUser>(options =>\r\n            {\r\n                options.SignIn.RequireConfirmedAccount = false;\r\n                options.User.RequireUniqueEmail = true;\r\n                options.User.AllowedUserNameCharacters =\r\n                    \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._@+\";\r\n                options.Password.RequireDigit = true;\r\n                options.Password.RequiredLength = 6;\r\n                options.Password.RequireNonAlphanumeric = false;\r\n                options.Password.RequireUppercase = true;\r\n                options.Password.RequireLowercase = true;\r\n                options.Lockout.DefaultLockoutTimeSpan = TimeSpan.FromMinutes(5);\r\n                options.Lockout.MaxFailedAccessAttempts = 5;\r\n                options.Lockout.AllowedForNewUsers = true;\r\n            })\r\n            .AddRoles<IdentityRole>()\r\n            .AddEntityFrameworkStores<UsersContext>()\r\n            .AddDefaultTokenProviders();\r\n            \r\n            services.AddAuthorization(options =>\r\n            {\r\n                options.AddPolicy(\"UserPolicy\", policy => policy.RequireRole(\"User\"));\r\n                options.AddPolicy(\"AdminPolicy\", policy => policy.RequireRole(\"Admin\"));\r\n            });\r\n        }\r\n\r\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\r\n        {\r\n            if (env.IsDevelopment())\r\n            {\r\n                app.UseDeveloperExceptionPage();\r\n                app.UseSwagger();\r\n                app.UseSwaggerUI();\r\n            }\r\n\r\n            app.UseHttpsRedirection();\r\n            app.UseRouting();\r\n\r\n            app.UseCors(builder =>\r\n            {\r\n                builder.WithOrigins(\"http://localhost:4200\")\r\n                       .AllowAnyMethod()\r\n                       .AllowAnyHeader()\r\n                       .AllowCredentials();\r\n            });\r\n            \r\n            app.UseRefreshTokenMiddleware();\r\n            app.UseJwtRefreshMiddleware();\r\n            app.UseAuthentication();\r\n            app.UseAuthorization();\r\n\r\n            app.UseEndpoints(endpoint =>\r\n            {\r\n                endpoint.MapHub<ChatHub>(\"/chat\");\r\n                endpoint.MapControllers();\r\n            });\r\n\r\n            AddRolesAndAdminAndTestUserAsync(app).Wait();\r\n        }\r\n\r\n        private async Task AddRolesAndAdminAndTestUserAsync(IApplicationBuilder app)\r\n        {\r\n            using var scope = app.ApplicationServices.CreateScope();\r\n            var roleManager = scope.ServiceProvider.GetRequiredService<RoleManager<IdentityRole>>();\r\n            var userManager = scope.ServiceProvider.GetRequiredService<UserManager<ApplicationUser>>();\r\n\r\n            var roleList = new List<string> { \"User\", \"Admin\" };\r\n\r\n            foreach (var roleName in roleList)\r\n            {\r\n                var roleExists = await roleManager.RoleExistsAsync(roleName);\r\n\r\n                if (!roleExists)\r\n                {\r\n                    await roleManager.CreateAsync(new IdentityRole(roleName));\r\n                }\r\n            }\r\n\r\n            await CreateAdminIfNotExistAsync(userManager);\r\n            await CreateTestUser(userManager);\r\n        }\r\n\r\n        private async Task CreateAdminIfNotExistAsync(UserManager<ApplicationUser> userManager)\r\n        {\r\n            var adminEmail = configuration[\"AdminEmail\"];\r\n\r\n            var adminInDb = await userManager.FindByEmailAsync(adminEmail!);\r\n            if (adminInDb == null)\r\n            {\r\n                var admin = new ApplicationUser(\"-\")\r\n                {\r\n                    UserName = configuration[\"AdminUserName\"],\r\n                    Email = adminEmail\r\n                };\r\n\r\n                var adminCreated = await userManager.CreateAsync(admin, configuration[\"AdminPassword\"]!);\r\n\r\n                if (adminCreated.Succeeded)\r\n                {\r\n                    await userManager.AddToRoleAsync(admin, \"Admin\");\r\n                }\r\n                else\r\n                {\r\n                    Console.WriteLine($\"Error creating admin user: {string.Join(\", \", adminCreated.Errors)}\");\r\n                }\r\n            }\r\n        }\r\n\r\n        private async Task CreateTestUser(UserManager<ApplicationUser> userManager)\r\n        {\r\n            const string testEmail1 = \"test1@hotmail.com\";\r\n            const string testEmail2 = \"test2@hotmail.com\";\r\n            const string testEmail3 = \"test3@hotmail.com\";\r\n\r\n            var testInDb1 = await userManager.FindByEmailAsync(testEmail1);\r\n            var testInDb2 = await userManager.FindByEmailAsync(testEmail2);\r\n            var testInDb3 = await userManager.FindByEmailAsync(testEmail3);\r\n\r\n            if (testInDb1 == null)\r\n            {\r\n                var testUser = new ApplicationUser(\"-\")\r\n                {\r\n                    UserName = \"TestUsername1\",\r\n                    Email = testEmail1,\r\n                    TwoFactorEnabled = true\r\n                };\r\n\r\n                var testUserCreated = await userManager.CreateAsync(testUser, \"testUserPassword123###\");\r\n\r\n                if (testUserCreated.Succeeded)\r\n                {\r\n                    await userManager.AddToRoleAsync(testUser, \"User\");\r\n                }\r\n                else\r\n                {\r\n                    Console.WriteLine($\"Error creating test user: {string.Join(\", \", testUserCreated.Errors)}\");\r\n                }\r\n            }\r\n            if (testInDb2 == null)\r\n            {\r\n                var testUser = new ApplicationUser(\"-\")\r\n                {\r\n                    UserName = \"TestUsername2\",\r\n                    Email = testEmail2,\r\n                    TwoFactorEnabled = true\r\n                };\r\n\r\n                var testUserCreated = await userManager.CreateAsync(testUser, \"testUserPassword123###\");\r\n\r\n                if (testUserCreated.Succeeded)\r\n                {\r\n                    await userManager.AddToRoleAsync(testUser, \"User\");\r\n                }\r\n                else\r\n                {\r\n                    Console.WriteLine($\"Error creating test user: {string.Join(\", \", testUserCreated.Errors)}\");\r\n                }\r\n            }\r\n            if (testInDb3 == null)\r\n            {\r\n                var testUser = new ApplicationUser(\"-\")\r\n                {\r\n                    UserName = \"TestUsername3\",\r\n                    Email = testEmail3,\r\n                    TwoFactorEnabled = false\r\n                };\r\n\r\n                var testUserCreated = await userManager.CreateAsync(testUser, \"testUserPassword123###\");\r\n\r\n                if (testUserCreated.Succeeded)\r\n                {\r\n                    await userManager.AddToRoleAsync(testUser, \"User\");\r\n                }\r\n                else\r\n                {\r\n                    Console.WriteLine($\"Error creating test user: {string.Join(\", \", testUserCreated.Errors)}\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/MessageAppServer/Startup.cs b/MessageAppServer/Startup.cs
--- a/MessageAppServer/Startup.cs	(revision 168e3c49969652445973c66a11ea33e72e9681b6)
+++ b/MessageAppServer/Startup.cs	(date 1712041825330)
@@ -1,3 +1,4 @@
+using System.Diagnostics;
 using System.Text;
 using Microsoft.AspNetCore.Authentication.JwtBearer;
 using Microsoft.AspNetCore.Identity;
@@ -24,6 +25,18 @@
             var connection = configuration["ConnectionString"];
             var issueSign = configuration["IssueSign"];
             var issueAudience = configuration["IssueAudience"];
+            
+            if (!IsSqlServerContainerRunning())
+            {
+                StopAllRunningContainers();
+                Thread.Sleep(2000);
+                StartSqlServerContainer();
+            }
+        
+            while (!IsSqlServerContainerRunning())
+            {
+                Thread.Sleep(10000);
+            }
 
             services.AddHttpContextAccessor();
             services.AddControllers(options =>
@@ -224,6 +237,72 @@
                 }
             }
         }
+        
+        private void StopAllRunningContainers()
+        {
+            using (var process = new Process())
+            {
+                process.StartInfo.FileName = "docker";
+                process.StartInfo.Arguments = "ps -q";
+                process.StartInfo.RedirectStandardOutput = true;
+                process.StartInfo.UseShellExecute = false;
+                process.StartInfo.CreateNoWindow = true;
+                process.Start();
+
+                string output = process.StandardOutput.ReadToEnd();
+                process.WaitForExit();
+
+                string[] containerIds = output.Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries);
+
+                foreach (string containerId in containerIds)
+                {
+                    StopContainer(containerId);
+                }
+            }
+        }
+    
+        private void StopContainer(string containerId)
+        {
+            using (var process = new Process())
+            {
+                process.StartInfo.FileName = "docker";
+                process.StartInfo.Arguments = $"stop {containerId}";
+                process.StartInfo.UseShellExecute = false;
+                process.StartInfo.CreateNoWindow = true;
+                process.Start();
+            }
+        }
+
+        private void StartSqlServerContainer()
+        {
+            using (var process = new Process())
+            {
+                process.StartInfo.FileName = "docker";
+                process.StartInfo.Arguments = "start dazzling_cartwright";
+                process.StartInfo.UseShellExecute = false;
+                process.StartInfo.CreateNoWindow = true;
+
+                process.Start();
+            }
+        }
+
+        private bool IsSqlServerContainerRunning()
+        {
+            using (var process = new Process())
+            {
+                process.StartInfo.FileName = "docker";
+                process.StartInfo.Arguments = "ps --format '{{.Names}}' --filter name=dazzling_cartwright";
+                process.StartInfo.RedirectStandardOutput = true;
+                process.StartInfo.UseShellExecute = false;
+                process.StartInfo.CreateNoWindow = true;
+
+                process.Start();
+                string output = process.StandardOutput.ReadToEnd();
+                process.WaitForExit();
+
+                return !string.IsNullOrWhiteSpace(output) && output.Contains("dazzling_cartwright");
+            }
+        }
 
         private async Task CreateTestUser(UserManager<ApplicationUser> userManager)
         {
Index: MessageAppServer/MessageAppServer.csproj
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n\r\n    <PropertyGroup>\r\n        <TargetFramework>net8.0</TargetFramework>\r\n        <Nullable>enable</Nullable>\r\n        <ImplicitUsings>enable</ImplicitUsings>\r\n        <InvariantGlobalization>false</InvariantGlobalization>\r\n        <UserSecretsId>d7867322-cb5c-4dc2-9c09-b598b2955136</UserSecretsId>\r\n        <RootNamespace>Server</RootNamespace>\r\n    </PropertyGroup>\r\n\r\n    <ItemGroup>\r\n        <PackageReference Include=\"DotNetEnv\" Version=\"3.0.0\" />\r\n        <PackageReference Include=\"Microsoft.AspNet.SignalR\" Version=\"2.4.3\" />\r\n        <PackageReference Include=\"Microsoft.AspNet.SignalR.Client\" Version=\"2.4.3\" />\r\n        <PackageReference Include=\"Microsoft.AspNetCore.Authentication.JwtBearer\" Version=\"7.0.14\" />\r\n        <PackageReference Include=\"Microsoft.AspNetCore.Identity.EntityFrameworkCore\" Version=\"8.0.1\" />\r\n        <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Testing\" Version=\"8.0.1\" />\r\n        <PackageReference Include=\"Microsoft.AspNetCore.OpenApi\" Version=\"8.0.0\" />\r\n        <PackageReference Include=\"Microsoft.AspNetCore.TestHost\" Version=\"8.0.1\" />\r\n        <PackageReference Include=\"Microsoft.EntityFrameworkCore.Design\" Version=\"8.0.1\">\r\n          <PrivateAssets>all</PrivateAssets>\r\n          <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\r\n        </PackageReference>\r\n        <PackageReference Include=\"Microsoft.EntityFrameworkCore.InMemory\" Version=\"8.0.1\" />\r\n        <PackageReference Include=\"Microsoft.EntityFrameworkCore.SqlServer\" Version=\"8.0.1\" />\r\n        <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.6.0\" />\r\n        <PackageReference Include=\"Moq\" Version=\"4.20.70\" />\r\n        <PackageReference Include=\"Newtonsoft.Json\" Version=\"13.0.3\" />\r\n        <PackageReference Include=\"Swashbuckle.AspNetCore\" Version=\"6.4.0\" />\r\n    </ItemGroup>\r\n\r\n</Project>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/MessageAppServer/MessageAppServer.csproj b/MessageAppServer/MessageAppServer.csproj
--- a/MessageAppServer/MessageAppServer.csproj	(revision 168e3c49969652445973c66a11ea33e72e9681b6)
+++ b/MessageAppServer/MessageAppServer.csproj	(date 1712041898462)
@@ -10,6 +10,7 @@
     </PropertyGroup>
 
     <ItemGroup>
+        <PackageReference Include="Docker.DotNet" Version="3.125.15" />
         <PackageReference Include="DotNetEnv" Version="3.0.0" />
         <PackageReference Include="Microsoft.AspNet.SignalR" Version="2.4.3" />
         <PackageReference Include="Microsoft.AspNet.SignalR.Client" Version="2.4.3" />
Index: MessageAppServer/Docker/DockerContainerHelperClass.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/MessageAppServer/Docker/DockerContainerHelperClass.cs b/MessageAppServer/Docker/DockerContainerHelperClass.cs
new file mode 100644
--- /dev/null	(date 1712041931777)
+++ b/MessageAppServer/Docker/DockerContainerHelperClass.cs	(date 1712041931777)
@@ -0,0 +1,6 @@
+namespace Server.Docker;
+
+public static class DockerContainerHelperClass
+{
+    
+}
\ No newline at end of file
