name: .NET Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      IssueAudience: ${{ secrets.ISSUE_AUDIENCE }}
      ConnectionString: ${{ secrets.TEST_CONNECTION_STRING }}
      ConnectionStringToPrivateKeyDatabase: ${{ secrets.TEST_CONNECTION_STRING_TO_PRIVATE_KEY_DATABASE }}
      IssueSign: ${{ secrets.ISSUE_SIGN }}
      AdminEmail: ${{ secrets.ADMIN_EMAIL }}
      AdminUserName: ${{ secrets.ADMIN_USERNAME }}
      AdminPassword: ${{ secrets.ADMIN_PASSWORD }}
      DeveloperEmail: ${{ secrets.DEVELOPER_EMAIL }}
      DeveloperPassword: ${{ secrets.DEVELOPER_PASSWORD }}
      GoogleClientId: ${{ secrets.GOOGLE_CLIENT_ID }}
      GoogleClientSecret: ${{ secrets.GOOGLE_CLIENT_SECRET }}
      FacebookClientId: ${{ secrets.FACEBOOK_CLIENT_ID }}
      FacebookClientSecret: ${{ secrets.FACEBOOK_CLIENT_SECRET }}
      FrontendPort: ${{ secrets.FRONTEND_PORT }}
      ImageFolderPath: /app/Avatars

    steps:
    - uses: actions/checkout@v2

    - name: Start MSSQL Server Docker container for Main database
      run: |
        docker run --name textinger_test_database -e ACCEPT_EULA=Y -e SA_PASSWORD='MyStrong(!)Password123' -p 1433:1433 -d mcr.microsoft.com/mssql/server
        # Wait for SQL Server to come up
        sleep 15
        # Install mssql-tools package
        docker exec -u 0 textinger_test_database /bin/bash -c "apt-get update && apt-get install -y mssql-tools unixodbc-dev"
        docker exec -u 0 textinger_test_database /bin/bash -c "echo 'export PATH=$PATH:/opt/mssql-tools/bin' >> ~/.bashrc"
        docker exec -u 0 textinger_test_database /bin/bash -c "source ~/.bashrc"
        # Check logs to ensure the container is running correctly
        docker logs textinger_test_database
        # Create the database if it doesn't exist
        docker exec textinger_test_database /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'MyStrong(!)Password123' -Q "IF DB_ID('textinger_test_database') IS NULL CREATE DATABASE [textinger_test_database];"
    - name: Start MSSQL Server Docker container for Key database
      run: |
        docker run --name textinger_private_key_test_database -e ACCEPT_EULA=Y -e SA_PASSWORD='MyStrong(!)Password123' -p 1434:1433 -d mcr.microsoft.com/mssql/server
        # Wait for SQL Server to come up
        sleep 15
        # Install mssql-tools package
        docker exec -u 0 textinger_private_key_test_database /bin/bash -c "apt-get update && apt-get install -y mssql-tools unixodbc-dev"
        docker exec -u 0 textinger_private_key_test_database /bin/bash -c "echo 'export PATH=$PATH:/opt/mssql-tools/bin' >> ~/.bashrc"
        docker exec -u 0 textinger_private_key_test_database /bin/bash -c "source ~/.bashrc"
        # Check logs to ensure the container is running correctly
        docker logs textinger_private_key_test_database
        # Create the database if it doesn't exist
        docker exec textinger_private_key_test_database /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'MyStrong(!)Password123' -Q "IF DB_ID('textinger_private_key_test_database') IS NULL CREATE DATABASE [textinger_private_key_test_database];"
        
    - name: Install EF Core tools
      run: dotnet tool install --global dotnet-ef --version 8.0.1

    - name: Install jq
      run: sudo apt-get update && sudo apt-get install -y jq

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '8.0'

    - name: Restore dependencies
      run: dotnet restore Server/Tests/Tests.csproj

    - name: Set up test configuration
      run: echo '${{ secrets.TEST_CONFIG_JSON }}' | jq . > testConfiguration.json

    - name: Copy test configuration to project directory
      run: cp testConfiguration.json Server/MessageAppServer

    - name: Build project
      working-directory: Server/MessageAppServer
      run: dotnet build --configuration Release --no-restore

    - name: Create migrations for MainDatabaseContext
      run: dotnet ef migrations add InitialMainDatabaseContext --context MainDatabaseContext --project Server/MessageAppServer --startup-project Server/MessageAppServer --output-dir Data/Migrations/MainDatabaseContext

    - name: Update database for MainMainDatabaseContext
      run: dotnet ef database update --context MainDatabaseContext --project Server/MessageAppServer --startup-project Server/MessageAppServer --verbose

    - name: Create migrations for PrivateKeyDbContext
      run: dotnet ef migrations add InitialKeyDbContext --context PrivateKeysDbContext --project Server/MessageAppServer --startup-project Server/MessageAppServer --output-dir Data/Migrations/PrivateKeysDbContext

    - name: Update database for PrivateKeyDbContext
      run: dotnet ef database update --context PrivateKeysDbContext --project Server/MessageAppServer --startup-project Server/MessageAppServer --verbose

    - name: Test
      working-directory: Server/Tests
      run: dotnet test --no-restore --verbosity normal
